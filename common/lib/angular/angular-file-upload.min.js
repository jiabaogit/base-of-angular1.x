! function(c, d) {
	"object" == typeof exports && "object" == typeof module ? module.exports = d() : "function" == typeof define && define.amd ? define(d) : "object" == typeof exports ? exports["angular-file-upload"] = d() : c["angular-file-upload"] = d()
}(this, function() {
	return function(d) {
		function e(a) {
			if (f[a]) {
				return f[a].exports
			}
			var b = f[a] = {
				exports: {},
				id: a,
				loaded: !1
			};
			return d[a].call(b.exports, b, b.exports, e), b.loaded = !0, b.exports
		}
		var f = {};
		return e.m = d, e.c = f, e.p = "", e(0)
	}([function(r, v, i) {
		var p = function(b) {
				return b && b.__esModule ? b["default"] : b
			},
			d = p(i(2)),
			l = p(i(3)),
			u = p(i(4)),
			e = p(i(5)),
			a = p(i(6)),
			h = p(i(7)),
			f = p(i(1)),
			s = p(i(8)),
			n = p(i(9)),
			o = p(i(10)),
			c = p(i(11)),
			t = p(i(12));
		angular.module(d.name, []).value("fileUploaderOptions", l).factory("FileUploader", u).factory("FileLikeObject", e).factory("FileItem", a).factory("FileDirective", h).factory("FileSelect", f).factory("FileDrop", s).factory("FileOver", n).directive("nvFileSelect", o).directive("nvFileDrop", c).directive("nvFileOver", t).run(["FileUploader", "FileLikeObject", "FileItem", "FileDirective", "FileSelect", "FileDrop", "FileOver", function(j, w, m, k, g, b, q) {
			j.FileLikeObject = w, j.FileItem = m, j.FileDirective = k, j.FileSelect = g, j.FileDrop = b, j.FileOver = q
		}])
	}, function(n, e, r) {
		var t = function(b) {
				return b && b.__esModule ? b["default"] : b
			},
			o = function() {
				function b(g, d) {
					for (var f in d) {
						var c = d[f];
						c.configurable = !0, c.value && (c.writable = !0)
					}
					Object.defineProperties(g, d)
				}
				return function(f, c, d) {
					return c && b(f.prototype, c), d && b(f, d), f
				}
			}(),
			s = function q(g, c, d) {
				var h = Object.getOwnPropertyDescriptor(g, c);
				if (void 0 === h) {
					var b = Object.getPrototypeOf(g);
					return null === b ? void 0 : q(b, c, d)
				}
				if ("value" in h && h.writable) {
					return h.value
				}
				var f = h.get;
				return void 0 === f ? void 0 : f.call(d)
			},
			a = function(c, b) {
				if ("function" != typeof b && null !== b) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof b)
				}
				c.prototype = Object.create(b && b.prototype, {
					constructor: {
						value: c,
						enumerable: !1,
						writable: !0,
						configurable: !0
					}
				}), b && (c.__proto__ = b)
			},
			l = function(c, b) {
				if (!(c instanceof b)) {
					throw new TypeError("Cannot call a class as a function")
				}
			},
			i = (t(r(2)), angular.extend);
		n.exports = function(c) {
			var b = function(f) {
				function d(h) {
					l(this, d);
					var g = i(h, {
						events: {
							$destroy: "destroy",
							change: "onChange"
						},
						prop: "select"
					});
					s(Object.getPrototypeOf(d.prototype), "constructor", this).call(this, g), this.uploader.isHTML5 || this.element.removeAttr("multiple"), this.element.prop("value", null)
				}
				return a(d, f), o(d, {
					getOptions: {
						value: function() {}
					},
					getFilters: {
						value: function() {}
					},
					isEmptyAfterSelection: {
						value: function() {
							return !!this.element.attr("multiple")
						}
					},
					onChange: {
						value: function() {
							var h = this.uploader.isHTML5 ? this.element[0].files : this.element[0],
								j = this.getOptions(),
								g = this.getFilters();
							this.uploader.isHTML5 || this.destroy(), this.uploader.addToQueue(h, j, g), this.isEmptyAfterSelection() && (this.element.prop("value", null), this.element.replaceWith(this.element = this.element.clone(!0)))
						}
					}
				}), d
			}(c);
			return b
		}, n.exports.$inject = ["FileDirective"]
	}, function(c, d) {
		c.exports = {
			name: "angularFileUpload"
		}
	}, function(c, d) {
		c.exports = {
			url: "/",
			alias: "file",
			headers: {},
			queue: [],
			progress: 0,
			autoUpload: !1,
			removeAfterUpload: !1,
			method: "POST",
			filters: [],
			formData: [],
			queueLimit: Number.MAX_VALUE,
			withCredentials: !1
		}
	}, function(u, d, i) {
		var p = function(b) {
				return b && b.__esModule ? b["default"] : b
			},
			e = function() {
				function b(h, k) {
					for (var g in k) {
						var j = k[g];
						j.configurable = !0, j.value && (j.writable = !0)
					}
					Object.defineProperties(h, k)
				}
				return function(j, g, h) {
					return g && b(j.prototype, g), h && b(j, h), j
				}
			}(),
			l = function(g, b) {
				if (!(g instanceof b)) {
					throw new TypeError("Cannot call a class as a function")
				}
			},
			c = (p(i(2)), angular.copy),
			r = angular.extend,
			o = angular.forEach,
			f = angular.isObject,
			s = angular.isNumber,
			a = angular.isDefined,
			n = angular.isArray,
			t = angular.element;
		u.exports = function(h, w, q, v, b, k) {
			var m = v.File,
				j = v.FormData,
				g = function() {
					function x(z) {
						l(this, x);
						var y = c(h);
						r(this, y, z, {
							isUploading: !1,
							_nextIndex: 0,
							_failFilterIndex: -1,
							_directives: {
								select: [],
								drop: [],
								over: []
							}
						}), this.filters.unshift({
							name: "queueLimit",
							fn: this._queueLimitFilter
						}), this.filters.unshift({
							name: "folder",
							fn: this._folderFilter
						})
					}
					return e(x, {
						addToQueue: {
							value: function(B, L, z) {
								var J = this,
									M = this.isArrayLikeObject(B) ? B : [B],
									A = this._getFilters(z),
									K = this.queue.length,
									y = [];
								o(M, function(D) {
									var C = new b(D);
									if (J._isValidFile(C, A, L)) {
										var F = new k(J, D, L);
										y.push(F), J.queue.push(F), J._onAfterAddingFile(F)
									} else {
										var E = A[J._failFilterIndex];
										J._onWhenAddingFileFailed(C, E, L)
									}
								}), this.queue.length !== K && (this._onAfterAddingAll(y), this.progress = this._getTotalProgress()), this._render(), this.autoUpload && this.uploadAll()
							}
						},
						removeFromQueue: {
							value: function(y) {
								var z = this.getIndexOfItem(y),
									A = this.queue[z];
								A.isUploading && A.cancel(), this.queue.splice(z, 1), A._destroy(), this.progress = this._getTotalProgress()
							}
						},
						clearQueue: {
							value: function() {
								for (; this.queue.length;) {
									this.queue[0].remove()
								}
								this.progress = 0
							}
						},
						uploadItem: {
							value: function(A) {
								var y = this.getIndexOfItem(A),
									z = this.queue[y],
									B = this.isHTML5 ? "_xhrTransport" : "_iframeTransport";
								z._prepareToUploading(), this.isUploading || (this.isUploading = !0, this[B](z))
							}
						},
						cancelItem: {
							value: function(A) {
								var y = this.getIndexOfItem(A),
									z = this.queue[y],
									B = this.isHTML5 ? "_xhr" : "_form";
								z && z.isUploading && z[B].abort()
							}
						},
						uploadAll: {
							value: function() {
								var y = this.getNotUploadedItems().filter(function(z) {
									return !z.isUploading
								});
								y.length && (o(y, function(z) {
									return z._prepareToUploading()
								}), y[0].upload())
							}
						},
						cancelAll: {
							value: function() {
								var y = this.getNotUploadedItems();
								o(y, function(z) {
									return z.cancel()
								})
							}
						},
						isFile: {
							value: function(y) {
								return this.constructor.isFile(y)
							}
						},
						isFileLikeObject: {
							value: function(y) {
								return this.constructor.isFileLikeObject(y)
							}
						},
						isArrayLikeObject: {
							value: function(y) {
								return this.constructor.isArrayLikeObject(y)
							}
						},
						getIndexOfItem: {
							value: function(y) {
								return s(y) ? y : this.queue.indexOf(y)
							}
						},
						getNotUploadedItems: {
							value: function() {
								return this.queue.filter(function(y) {
									return !y.isUploaded
								})
							}
						},
						getReadyItems: {
							value: function() {
								return this.queue.filter(function(y) {
									return y.isReady && !y.isUploading
								}).sort(function(y, z) {
									return y.index - z.index
								})
							}
						},
						destroy: {
							value: function() {
								var y = this;
								o(this._directives, function(z) {
									o(y._directives[z], function(A) {
										A.destroy()
									})
								})
							}
						},
						onAfterAddingAll: {
							value: function(y) {}
						},
						onAfterAddingFile: {
							value: function(y) {}
						},
						onWhenAddingFileFailed: {
							value: function(y, z, A) {}
						},
						onBeforeUploadItem: {
							value: function(y) {}
						},
						onProgressItem: {
							value: function(y, z) {}
						},
						onProgressAll: {
							value: function(y) {}
						},
						onSuccessItem: {
							value: function(A, y, z, B) {}
						},
						onErrorItem: {
							value: function(A, y, z, B) {}
						},
						onCancelItem: {
							value: function(A, y, z, B) {}
						},
						onCompleteItem: {
							value: function(A, y, z, B) {}
						},
						onCompleteAll: {
							value: function() {}
						},
						_getTotalProgress: {
							value: function(A) {
								if (this.removeAfterUpload) {
									return A || 0
								}
								var G = this.getNotUploadedItems().length,
									z = G ? this.queue.length - G : this.queue.length,
									B = 100 / this.queue.length,
									y = (A || 0) * B / 100;
								return Math.round(z * B + y)
							}
						},
						_getFilters: {
							value: function(y) {
								if (!y) {
									return this.filters
								}
								if (n(y)) {
									return y
								}
								var z = y.match(/[^\s,]+/g);
								return this.filters.filter(function(A) {
									return -1 !== z.indexOf(A.name)
								})
							}
						},
						_render: {
							value: function() {
								w.$$phase || w.$apply()
							}
						},
						_folderFilter: {
							value: function(y) {
								return !(!y.size && !y.type)
							}
						},
						_queueLimitFilter: {
							value: function() {
								return this.queue.length < this.queueLimit
							}
						},
						_isValidFile: {
							value: function(A, y, z) {
								var B = this;
								return this._failFilterIndex = -1, y.length ? y.every(function(C) {
									return B._failFilterIndex++, C.fn.call(B, A, z)
								}) : !0
							}
						},
						_isSuccessCode: {
							value: function(y) {
								return y >= 200 && 300 > y || 304 === y
							}
						},
						_transformResponse: {
							value: function(z, A) {
								var y = this._headersGetter(A);
								return o(q.defaults.transformResponse, function(B) {
									z = B(z, y)
								}), z
							}
						},
						_parseHeaders: {
							value: function(A) {
								var G, z, B, y = {};
								return A ? (o(A.split("\n"), function(C) {
									B = C.indexOf(":"), G = C.slice(0, B).trim().toLowerCase(), z = C.slice(B + 1).trim(), G && (y[G] = y[G] ? y[G] + ", " + z : z)
								}), y) : y
							}
						},
						_headersGetter: {
							value: function(y) {
								return function(z) {
									return z ? y[z.toLowerCase()] || null : y
								}
							}
						},
						_xhrTransport: {
							value: function(A) {
								var y = this,
									z = A._xhr = new XMLHttpRequest,
									B = new j;
								if (this._onBeforeUploadItem(A), o(A.formData, function(C) {
										o(C, function(E, D) {
											B.append(D, E)
										})
									}), "number" != typeof A._file.size) {
									throw new TypeError("The file specified is no longer valid")
								}
								B.append(A.alias, A._file, A.file.name), z.upload.onprogress = function(D) {
									var C = Math.round(D.lengthComputable ? 100 * D.loaded / D.total : 0);
									y._onProgressItem(A, C)
								}, z.onload = function() {
									var E = y._parseHeaders(z.getAllResponseHeaders()),
										H = y._transformResponse(z.response, E),
										D = y._isSuccessCode(z.status) ? "Success" : "Error",
										C = "_on" + D + "Item";
									y[C](A, H, z.status, E), y._onCompleteItem(A, H, z.status, E)
								}, z.onerror = function() {
									var C = y._parseHeaders(z.getAllResponseHeaders()),
										D = y._transformResponse(z.response, C);
									y._onErrorItem(A, D, z.status, C), y._onCompleteItem(A, D, z.status, C)
								}, z.onabort = function() {
									var C = y._parseHeaders(z.getAllResponseHeaders()),
										D = y._transformResponse(z.response, C);
									y._onCancelItem(A, D, z.status, C), y._onCompleteItem(A, D, z.status, C)
								}, $.ajax({
									type: "GET",
									url: "/server/publics/file/authorize/web?fileType=.jpg",
									cache: false,
									success: function(C) {
										var C = C.payload;
										var D = new j;
										D.append("key", C.key);
										D.append("Content-Type", C.Content_Type);
										D.append("OSSAccessKeyId", C.OSSAccessKeyId);
										D.append("policy", C.policy);
										D.append("signature", C.signature);
										D.append("file", A._file);
										localStorage.removeItem("uploadImg");
										localStorage.uploadImg = C.publicUrl;
										z.open(A.method, C.alyHost, !0), z.withCredentials = A.withCredentials, o(A.headers, function(E, H) {
											z.setRequestHeader(H, E)
										}), z.send(D)
									}
								}), this._render()
							}
						},
						_iframeTransport: {
							value: function(A) {
								var G = this,
									z = t('<form style="display: none;" />'),
									B = t('<iframe name="iframeTransport' + Date.now() + '">'),
									y = A._input;
								A._form && A._form.replaceWith(y), A._form = z, this._onBeforeUploadItem(A), y.prop("name", A.alias), o(A.formData, function(C) {
									o(C, function(D, F) {
										var E = t('<input type="hidden" name="' + F + '" />');
										E.val(D), z.append(E)
									})
								}), z.prop({
									action: A.url,
									method: "POST",
									target: B.prop("name"),
									enctype: "multipart/form-data",
									encoding: "multipart/form-data"
								}), B.bind("load", function() {
									var C = "",
										K = 200;
									try {
										C = B[0].contentDocument.body.innerHTML
									} catch (D) {
										K = 500
									}
									var F = {
											response: C,
											status: K,
											dummy: !0
										},
										L = {},
										E = G._transformResponse(F.response, L);
									G._onSuccessItem(A, E, F.status, L), G._onCompleteItem(A, E, F.status, L)
								}), z.abort = function() {
									var C, D = {
											status: 0,
											dummy: !0
										},
										E = {};
									B.unbind("load").prop("src", "javascript:false;"), z.replaceWith(y), G._onCancelItem(A, C, D.status, E), G._onCompleteItem(A, C, D.status, E)
								}, y.after(z), z.append(y).append(B), z[0].submit(), this._render()
							}
						},
						_onWhenAddingFileFailed: {
							value: function(y, z, A) {
								this.onWhenAddingFileFailed(y, z, A)
							}
						},
						_onAfterAddingFile: {
							value: function(y) {
								this.onAfterAddingFile(y)
							}
						},
						_onAfterAddingAll: {
							value: function(y) {
								this.onAfterAddingAll(y)
							}
						},
						_onBeforeUploadItem: {
							value: function(y) {
								y._onBeforeUpload(), this.onBeforeUploadItem(y)
							}
						},
						_onProgressItem: {
							value: function(y, z) {
								var A = this._getTotalProgress(z);
								this.progress = A, y._onProgress(z), this.onProgressItem(y, z), this.onProgressAll(A), this._render()
							}
						},
						_onSuccessItem: {
							value: function(A, y, z, B) {
								A._onSuccess(y, z, B), this.onSuccessItem(A, y, z, B)
							}
						},
						_onErrorItem: {
							value: function(A, y, z, B) {
								A._onError(y, z, B), this.onErrorItem(A, y, z, B)
							}
						},
						_onCancelItem: {
							value: function(A, y, z, B) {
								A._onCancel(y, z, B), this.onCancelItem(A, y, z, B)
							}
						},
						_onCompleteItem: {
							value: function(A, G, z, B) {
								A._onComplete(G, z, B), this.onCompleteItem(A, G, z, B);
								var y = this.getReadyItems()[0];
								return this.isUploading = !1, a(y) ? void y.upload() : (this.onCompleteAll(), this.progress = this._getTotalProgress(), void this._render())
							}
						}
					}, {
						isFile: {
							value: function(y) {
								return m && y instanceof m
							}
						},
						isFileLikeObject: {
							value: function(y) {
								return y instanceof b
							}
						},
						isArrayLikeObject: {
							value: function(y) {
								return f(y) && "length" in y
							}
						},
						inherit: {
							value: function(y, z) {
								y.prototype = Object.create(z.prototype), y.prototype.constructor = y, y.super_ = z
							}
						}
					}), x
				}();
			return g.prototype.isHTML5 = !(!m || !j), g.isHTML5 = g.prototype.isHTML5, g
		}, u.exports.$inject = ["fileUploaderOptions", "$rootScope", "$http", "$window", "FileLikeObject", "FileItem"]
	}, function(n, e, p) {
		var r = function(b) {
				return b && b.__esModule ? b["default"] : b
			},
			o = function() {
				function b(g, d) {
					for (var f in d) {
						var c = d[f];
						c.configurable = !0, c.value && (c.writable = !0)
					}
					Object.defineProperties(g, d)
				}
				return function(f, c, d) {
					return c && b(f.prototype, c), d && b(f, d), f
				}
			}(),
			q = function(c, b) {
				if (!(c instanceof b)) {
					throw new TypeError("Cannot call a class as a function")
				}
			},
			a = (r(p(2)), angular.copy),
			m = angular.isElement,
			i = angular.isString;
		n.exports = function() {
			var b = function() {
				function c(d) {
					q(this, c);
					var f = m(d),
						h = f ? d.value : d,
						g = i(h) ? "FakePath" : "Object",
						j = "_createFrom" + g;
					this[j](h)
				}
				return o(c, {
					_createFromFakePath: {
						value: function(d) {
							this.lastModifiedDate = null, this.size = null, this.type = "like/" + d.slice(d.lastIndexOf(".") + 1).toLowerCase(), this.name = d.slice(d.lastIndexOf("/") + d.lastIndexOf("\\") + 2)
						}
					},
					_createFromObject: {
						value: function(d) {
							this.lastModifiedDate = a(d.lastModifiedDate), this.size = d.size, this.type = d.type, this.name = d.name
						}
					}
				}), c
			}();
			return b
		}, n.exports.$inject = []
	}, function(n, e, r) {
		var t = function(b) {
				return b && b.__esModule ? b["default"] : b
			},
			o = function() {
				function b(g, d) {
					for (var f in d) {
						var c = d[f];
						c.configurable = !0, c.value && (c.writable = !0)
					}
					Object.defineProperties(g, d)
				}
				return function(f, c, d) {
					return c && b(f.prototype, c), d && b(f, d), f
				}
			}(),
			s = function(c, b) {
				if (!(c instanceof b)) {
					throw new TypeError("Cannot call a class as a function")
				}
			},
			a = (t(r(2)), angular.copy),
			l = angular.extend,
			i = angular.element,
			q = angular.isElement;
		n.exports = function(d, c) {
			var b = function() {
				function f(h, m, p) {
					s(this, f);
					var g = q(m),
						k = g ? i(m) : null,
						j = g ? null : m;
					l(this, {
						url: h.url,
						alias: h.alias,
						headers: a(h.headers),
						formData: a(h.formData),
						removeAfterUpload: h.removeAfterUpload,
						withCredentials: h.withCredentials,
						method: h.method
					}, p, {
						uploader: h,
						file: new c(m),
						isReady: !1,
						isUploading: !1,
						isUploaded: !1,
						isSuccess: !1,
						isCancel: !1,
						isError: !1,
						progress: 0,
						index: null,
						_file: j,
						_input: k
					}), k && this._replaceNode(k)
				}
				return o(f, {
					upload: {
						value: function() {
							try {
								this.uploader.uploadItem(this)
							} catch (g) {
								this.uploader._onCompleteItem(this, "", 0, []), this.uploader._onErrorItem(this, "", 0, [])
							}
						}
					},
					cancel: {
						value: function() {
							this.uploader.cancelItem(this)
						}
					},
					remove: {
						value: function() {
							this.uploader.removeFromQueue(this)
						}
					},
					onBeforeUpload: {
						value: function() {}
					},
					onProgress: {
						value: function(g) {}
					},
					onSuccess: {
						value: function(h, j, g) {}
					},
					onError: {
						value: function(h, j, g) {}
					},
					onCancel: {
						value: function(h, j, g) {}
					},
					onComplete: {
						value: function(h, j, g) {}
					},
					_onBeforeUpload: {
						value: function() {
							this.isReady = !0, this.isUploading = !0, this.isUploaded = !1, this.isSuccess = !1, this.isCancel = !1, this.isError = !1, this.progress = 0, this.onBeforeUpload()
						}
					},
					_onProgress: {
						value: function(g) {
							this.progress = g, this.onProgress(g)
						}
					},
					_onSuccess: {
						value: function(h, j, g) {
							this.isReady = !1, this.isUploading = !1, this.isUploaded = !0, this.isSuccess = !0, this.isCancel = !1, this.isError = !1, this.progress = 100, this.index = null, this.onSuccess(h, j, g)
						}
					},
					_onError: {
						value: function(h, j, g) {
							this.isReady = !1, this.isUploading = !1, this.isUploaded = !0, this.isSuccess = !1, this.isCancel = !1, this.isError = !0, this.progress = 0, this.index = null, this.onError(h, j, g)
						}
					},
					_onCancel: {
						value: function(h, j, g) {
							this.isReady = !1, this.isUploading = !1, this.isUploaded = !1, this.isSuccess = !1, this.isCancel = !0, this.isError = !1, this.progress = 0, this.index = null, this.onCancel(h, j, g)
						}
					},
					_onComplete: {
						value: function(h, j, g) {
							this.onComplete(h, j, g), this.removeAfterUpload && this.remove()
						}
					},
					_destroy: {
						value: function() {
							this._input && this._input.remove(), this._form && this._form.remove(), delete this._form, delete this._input
						}
					},
					_prepareToUploading: {
						value: function() {
							this.index = this.index || ++this.uploader._nextIndex, this.isReady = !0
						}
					},
					_replaceNode: {
						value: function(h) {
							var g = d(h.clone())(h.scope());
							g.prop("value", null), h.css("display", "none"), h.after(g)
						}
					}
				}), f
			}();
			return b
		}, n.exports.$inject = ["$compile", "FileLikeObject"]
	}, function(l, e, j) {
		var m = function(a) {
				return a && a.__esModule ? a["default"] : a
			},
			i = function() {
				function a(c, f) {
					for (var b in f) {
						var d = f[b];
						d.configurable = !0, d.value && (d.writable = !0)
					}
					Object.defineProperties(c, f)
				}
				return function(d, b, c) {
					return b && a(d.prototype, b), c && a(d, c), d
				}
			}(),
			k = function(a, b) {
				if (!(a instanceof b)) {
					throw new TypeError("Cannot call a class as a function")
				}
			},
			n = (m(j(2)), angular.extend);
		l.exports = function() {
			var a = function() {
				function b(c) {
					k(this, b), n(this, c), this.uploader._directives[this.prop].push(this), this._saveLinks(), this.bind()
				}
				return i(b, {
					bind: {
						value: function() {
							for (var c in this.events) {
								var d = this.events[c];
								this.element.bind(c, this[d])
							}
						}
					},
					unbind: {
						value: function() {
							for (var c in this.events) {
								this.element.unbind(c, this.events[c])
							}
						}
					},
					destroy: {
						value: function() {
							var c = this.uploader._directives[this.prop].indexOf(this);
							this.uploader._directives[this.prop].splice(c, 1), this.unbind()
						}
					},
					_saveLinks: {
						value: function() {
							for (var c in this.events) {
								var d = this.events[c];
								this[d] = this[d].bind(this)
							}
						}
					}
				}), b
			}();
			return a.prototype.events = {}, a
		}, l.exports.$inject = []
	}, function(l, a, r) {
		var t = function(b) {
				return b && b.__esModule ? b["default"] : b
			},
			n = function() {
				function b(d, h) {
					for (var g in h) {
						var f = h[g];
						f.configurable = !0, f.value && (f.writable = !0)
					}
					Object.defineProperties(d, h)
				}
				return function(g, d, f) {
					return d && b(g.prototype, d), f && b(g, f), g
				}
			}(),
			s = function i(h, j, f) {
				var d = Object.getOwnPropertyDescriptor(h, j);
				if (void 0 === d) {
					var b = Object.getPrototypeOf(h);
					return null === b ? void 0 : i(b, j, f)
				}
				if ("value" in d && d.writable) {
					return d.value
				}
				var g = d.get;
				return void 0 === g ? void 0 : g.call(f)
			},
			u = function(d, b) {
				if ("function" != typeof b && null !== b) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof b)
				}
				d.prototype = Object.create(b && b.prototype, {
					constructor: {
						value: d,
						enumerable: !1,
						writable: !0,
						configurable: !0
					}
				}), b && (d.__proto__ = b)
			},
			e = function(d, b) {
				if (!(d instanceof b)) {
					throw new TypeError("Cannot call a class as a function")
				}
			},
			c = (t(r(2)), angular.extend),
			o = angular.forEach;
		l.exports = function(d) {
			var b = function(f) {
				function g(j) {
					e(this, g);
					var h = c(j, {
						events: {
							$destroy: "destroy",
							drop: "onDrop",
							dragover: "onDragOver",
							dragleave: "onDragLeave"
						},
						prop: "drop"
					});
					s(Object.getPrototypeOf(g.prototype), "constructor", this).call(this, h)
				}
				return u(g, f), n(g, {
					getOptions: {
						value: function() {}
					},
					getFilters: {
						value: function() {}
					},
					onDrop: {
						value: function(j) {
							var m = this._getTransfer(j);
							if (m) {
								var h = this.getOptions(),
									k = this.getFilters();
								this._preventAndStop(j), o(this.uploader._directives.over, this._removeOverClass, this), this.uploader.addToQueue(m.files, h, k)
							}
						}
					},
					onDragOver: {
						value: function(h) {
							var j = this._getTransfer(h);
							this._haveFiles(j.types) && (j.dropEffect = "copy", this._preventAndStop(h), o(this.uploader._directives.over, this._addOverClass, this))
						}
					},
					onDragLeave: {
						value: function(h) {
							h.currentTarget !== this.element[0] && (this._preventAndStop(h), o(this.uploader._directives.over, this._removeOverClass, this))
						}
					},
					_getTransfer: {
						value: function(h) {
							return h.dataTransfer ? h.dataTransfer : h.originalEvent.dataTransfer
						}
					},
					_preventAndStop: {
						value: function(h) {
							h.preventDefault(), h.stopPropagation()
						}
					},
					_haveFiles: {
						value: function(h) {
							return h ? h.indexOf ? -1 !== h.indexOf("Files") : h.contains ? h.contains("Files") : !1 : !1
						}
					},
					_addOverClass: {
						value: function(h) {
							h.addOverClass()
						}
					},
					_removeOverClass: {
						value: function(h) {
							h.removeOverClass()
						}
					}
				}), g
			}(d);
			return b
		}, l.exports.$inject = ["FileDirective"]
	}, function(n, e, r) {
		var t = function(b) {
				return b && b.__esModule ? b["default"] : b
			},
			o = function() {
				function b(g, d) {
					for (var f in d) {
						var c = d[f];
						c.configurable = !0, c.value && (c.writable = !0)
					}
					Object.defineProperties(g, d)
				}
				return function(f, c, d) {
					return c && b(f.prototype, c), d && b(f, d), f
				}
			}(),
			s = function q(g, c, d) {
				var h = Object.getOwnPropertyDescriptor(g, c);
				if (void 0 === h) {
					var b = Object.getPrototypeOf(g);
					return null === b ? void 0 : q(b, c, d)
				}
				if ("value" in h && h.writable) {
					return h.value
				}
				var f = h.get;
				return void 0 === f ? void 0 : f.call(d)
			},
			a = function(c, b) {
				if ("function" != typeof b && null !== b) {
					throw new TypeError("Super expression must either be null or a function, not " + typeof b)
				}
				c.prototype = Object.create(b && b.prototype, {
					constructor: {
						value: c,
						enumerable: !1,
						writable: !0,
						configurable: !0
					}
				}), b && (c.__proto__ = b)
			},
			l = function(c, b) {
				if (!(c instanceof b)) {
					throw new TypeError("Cannot call a class as a function")
				}
			},
			i = (t(r(2)), angular.extend);
		n.exports = function(c) {
			var b = function(f) {
				function d(h) {
					l(this, d);
					var g = i(h, {
						events: {
							$destroy: "destroy"
						},
						prop: "over",
						overClass: "nv-file-over"
					});
					s(Object.getPrototypeOf(d.prototype), "constructor", this).call(this, g)
				}
				return a(d, f), o(d, {
					addOverClass: {
						value: function() {
							this.element.addClass(this.getOverClass())
						}
					},
					removeOverClass: {
						value: function() {
							this.element.removeClass(this.getOverClass())
						}
					},
					getOverClass: {
						value: function() {
							return this.overClass
						}
					}
				}), d
			}(c);
			return b
		}, n.exports.$inject = ["FileDirective"]
	}, function(h, f, g) {
		var e = function(a) {
			return a && a.__esModule ? a["default"] : a
		};
		e(g(2));
		h.exports = function(b, c, a) {
			return {
				link: function(i, o, d) {
					var n = i.$eval(d.uploader);
					if (!(n instanceof c)) {
						throw new TypeError('"Uploader" must be an instance of FileUploader')
					}
					var p = new a({
						uploader: n,
						element: o
					});
					p.getOptions = b(d.options).bind(p, i), p.getFilters = function() {
						return d.filters
					}
				}
			}
		}, h.exports.$inject = ["$parse", "FileUploader", "FileSelect"]
	}, function(h, f, g) {
		var e = function(a) {
			return a && a.__esModule ? a["default"] : a
		};
		e(g(2));
		h.exports = function(b, c, a) {
			return {
				link: function(i, o, d) {
					var n = i.$eval(d.uploader);
					if (!(n instanceof c)) {
						throw new TypeError('"Uploader" must be an instance of FileUploader')
					}
					if (n.isHTML5) {
						var p = new a({
							uploader: n,
							element: o
						});
						p.getOptions = b(d.options).bind(p, i), p.getFilters = function() {
							return d.filters
						}
					}
				}
			}
		}, h.exports.$inject = ["$parse", "FileUploader", "FileDrop"]
	}, function(h, f, g) {
		var e = function(a) {
			return a && a.__esModule ? a["default"] : a
		};
		e(g(2));
		h.exports = function(a, b) {
			return {
				link: function(c, i, n) {
					var d = c.$eval(n.uploader);
					if (!(d instanceof a)) {
						throw new TypeError('"Uploader" must be an instance of FileUploader')
					}
					var m = new b({
						uploader: d,
						element: i
					});
					m.getOverClass = function() {
						return n.overClass || m.overClass
					}
				}
			}
		}, h.exports.$inject = ["FileUploader", "FileOver"]
	}])
});